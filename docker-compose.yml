version: "3.4"

services:
  # postgres:
  #   image: postgres:12.12-alpine
  #   container_name: postgres
  #   profiles:
  #     - profileName
  #   restart: always
  #   volumes:
  #     - ./postgres_data:/var/lib/postgresql/data/
  #   env_file:
  #     - ./.env

  # redis:
  #   image: redis:6.2-alpine
  #   container_name: redis
  #   restart: always

  # rabbitmq:
  #   image: rabbitmq:3.11-alpine
  #   container_name: rabbitmq
  #   restart: always
  #   volumes:
  #     - ./rabbitmq:/var/lib/rabbitmq
  #   env_file:
  #     - ./.env
  #   ports:
  #     - 5672:5672

  # celery_worker:
  #   container_name: celeryworker
  #   build:
  #     context: backend/
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend:/home/app/backend
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - rabbitmq
  #   command: poetry run celery -A backend worker -l info --pool=prefork

  # celery_beat:
  #   container_name: celeryscheduler
  #   build:
  #     context: backend/
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./backend:/home/app/backend
  #   env_file:
  #     - ./.env
  #   depends_on:
  #     - rabbitmq
  #   command: poetry run celery -A backend beat -l info

  # flower:
  #   container_name: flower
  #   image: mher/flower:0.9.7
  #   command: celery flower
  #   env_file:
  #     - ./.env
  #   ports:
  #     - 5555:5555
  #   depends_on:
  #     - rabbitmq

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    env_file:
      - .env
    volumes:
      - ./backend:/home/app/backend
    ports:
      - 8000:8000
    entrypoint: poetry run bash entrypoint.sh
    command: poetry run python manage.py runserver 0.0.0.0:8000
    # depends_on:
    #   postgres:
    #     condition: service_healthy


  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: ./Dockerfile
  #   volumes:
  #     - ./frontend:/home/app/frontend
  #   ports:
  #     - 3000:3000
  #   depends_on:
  #     - backend
  #   env_file:
  #     - .env
  #   command: >
  #     sh -c "if [ ! -d "node_modules" ]; then
  #              npm i
  #              npm rebuild node-sass
  #            fi
  #            if [ ! -d "frontend_static" ]; then
  #              npm run build
  #            fi
  #            npm start"
